name: Multiples jops
on:
  push:
    branches:
      - 'develop'
      - 'feature/**'
      - 'master'
jobs:
  job1: 
     name: Job1 Starting with a Maven workflow template
     runs-on: ubuntu-latest
     steps:
      - uses: actions/checkout@v2 # The checkout step downloads a copy of your repository on the runner.
      - name: set up node
        uses: actions/setup-node@v1
      - name: Install bats
        run: npm install -g bats
      - name: execute a cmd
        run: bats -v
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Build with Maven
        run: mvn -B package --file pom.xml


  job2:
    name: job2 Specifying the JVM and node version and architecture
    needs: job1
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2 # The checkout step downloads a copy of your repository on the runner.
      - uses: actions/setup-java@v1
        with:
          java-version: 11
          architecture: x64
      - uses: actions/setup-node@v1
        with:
          node-version: 12.16.1
      - name: Install node.js packages
        run: npm install

  job3_publish:
    name: publish snapshot
    needs: job1
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2 # The checkout step downloads a copy of your repository on the runner.
      - uses: actions/setup-java@v1
        with:
          java-version: 11
          architecture: x64
      - uses: actions/setup-node@v1
        with:
          node-version: 12.16.1
      - name: publish snapshot artifact to jfrog artifactory
        run: |
              echo "-------------------PREVIOUS SETTINGS.xml------------------------------"
              cat ~/.m2/settings.xml

              java -version
              cp config/settings.xml ~/.m2/settings.xml
              mvn -ntp package deploy -Pprod -DskipTests


  job4_publish:
    name: publish snapshot
    needs: job3_publish
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2 # The checkout step downloads a copy of your repository on the runner.
      - uses: actions/setup-java@v1
        with:
          java-version: 11
          architecture: x64
      - uses: actions/setup-node@v1
        with:
          node-version: 12.16.1
      - name: Ping Artifactory
        continue-on-error: true
        uses: katcosgrove/jfrogcli-action@v1.0.0-beta
        with:
            cmd: 'ping'
        env:
            auth: ${{ secrets.JFROG_AUTH_TYPE }}
            #accesstoken: ${{ secrets.JFROG_ACCESS_TOKEN }}
            #apikey: ${{ secrets.JFROG_API_KEY }}
            user: ${{ secrets.JFROG_USER }}
            pass: ${{ secrets.JFROG_ENCRYPTED_PWD }}
            url: ${{ secrets.JFROG_URL }}
      - name: publish snapshot artifact to jfrog artifactory
        continue-on-error: true
        run: |
              cat ~/.m2/settings.xml
              mvn -ntp package deploy -Pprod -DskipTests
  
  job4_publish_bis:
    name: publish snapshot
    needs: job3_publish
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2 # The checkout step downloads a copy of your repository on the runner.
      - uses: actions/setup-java@v1
        with:
          java-version: 11
          architecture: x64
      - uses: actions/setup-node@v1
        with:
          node-version: 12.16.1
      - name: Connect to Artifactory
        continue-on-error: true
        uses: Deepakanandrao/jfrog-cli@v3
        with:
          cli_cmd: |                                      # commands to be excuted
                'jfrog rt ping'
                 cat ~/.m2/settings.xml
                 mvn -ntp package deploy -Pprod -DskipTests
        env:  
          SERVER_URL: ${{ secrets.JFROG_URL }}           # Required (e.g. https://jfrogy.com/artifactory)
          #SERVER_ID: ${{ secrets.SERVER_ID }}             # Optional - Name to be recognized server with
          #DISTRIBUTION_URL: ${{ secrets.SERVER_URL }}     # Optional
          ACCESS_TYPE: "access-token" #${{ secrets.ACTION_TYPE }}         # Required  (username-password, access-token, api-key)
          #USERNAME: ${{ secrets.JFROG_USER }}               # Required any of one of the following
          #PASSWORD: ${{ secrets.JFROG_ENCRYPTED_PWD }}
          #API_KEY: ${{ secrets.JFROG_API_KEY }}
          ACCESS_TOKEN: ${{ secrets.JFROG_ACCESS_TOKEN }} 
      - name: publish snapshot artifact to jfrog artifactory
        continue-on-error: true
        run: |
              cat ~/.m2/settings.xml
              mvn -ntp package deploy -Pprod -DskipTests

  
 job5_release:
    name: publish release to jfrog
    needs: job4_publish
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2 # The checkout step downloads a copy of your repository on the runner.
      - uses: actions/setup-java@v1
        with:
          java-version: 11
          architecture: x64
      - uses: actions/setup-node@v1
        with:
          node-version: 12.16.1
      - name: publish release artifact to jfrog artifactory
        continue-on-error: true
        env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
              git config --global user.email "j.bilong@gmail.com"
              git config --global user.name "bilonjea"
              cp config/settings.xml ~/.m2/settings.xml
              mvn -ntp release:prepare release:perform -DskipTests 
  
  
  job5_release_bis:
    name: publish release to jfrog
    needs: job4_publish
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2 # The checkout step downloads a copy of your repository on the runner.
      - uses: actions/setup-java@v1
        with:
          java-version: 11
          architecture: x64
      - uses: actions/setup-node@v1
        with:
          node-version: 12.16.1
      - name: publish release artifact to jfrog artifactory
        continue-on-error: true
        uses: MiniDigger/github-actions-maven-release@v1.10.2 #qcastel/github-actions-maven-release@v1.0.3
        with:
          #access-token: ${{ secrets.GITHUB_ACCESS_TOKEN }}
          release-branch-name: "master"
          git-release-bot-name: "release-bot"
          git-release-bot-email: "release-bot@example.com"
          access-token: ${{ secrets.GITHUB_ACCESS_TOKEN }}
          maven-args: "-Dmaven.javadoc.skip=true -DskipTests -DskipITs -Ddockerfile.skip -DdockerCompose.skip"
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              
              
  
